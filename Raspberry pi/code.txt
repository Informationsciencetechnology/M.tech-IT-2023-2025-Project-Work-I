import time
import spidev
import RPi.GPIO as GPIO
import paho.mqtt.client as mqtt
from datetime import datetime
import sqlite3
import ssl

# GPIO Setup
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

# Relay Pins for controlling pumps/valves
WATER_PUMP_RELAY = 27
NUTRIENT_PUMP_RELAY = 22
SOLENOID_VALVE_RELAY = 23

GPIO.setup(WATER_PUMP_RELAY, GPIO.OUT)
GPIO.setup(NUTRIENT_PUMP_RELAY, GPIO.OUT)
GPIO.setup(SOLENOID_VALVE_RELAY, GPIO.OUT)

# SPI Setup for MCP3008 ADC
spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1350000

# SQLite Database Setup
db_path = '/home/vijay/my_project/data.db'
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS sensor_data(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp TEXT,
        soil_moisture INTEGER,
        pH_value INTEGER
    )
''')

# MQTT Setup
mqtt_broker = 'mqtt3.thingspeak.com'
mqtt_port = 8883  # SSL/TLS port
publish_topic = 'channels/2767540/publish/7F63WXAUKAKLHQX3'
subscribe_topic = 'sensor/control'

# MQTT Credentials
username = 'AxMUFzgHPAAzFA0vNyw1DCw'
clientId = 'AxMUFzgHPAAzFA0vNyw1DCw'
password = 'T9lf00ZUeS1oXUi1YOxALscM'

# MQTT Client Setup
mqtt_client = mqtt.Client(clientId)
mqtt_client.username_pw_set(username, password)  # Set MQTT credentials
mqtt_client.tls_set_context(ssl.create_default_context())  # SSL/TLS configuration

# Enable MQTT logging for debugging
mqtt_client.on_log = lambda client, userdata, level, buf: print("MQTT Log:", buf)  # Logging for debugging

# Keep-Alive Timer
mqtt_client.connect(mqtt_broker, mqtt_port, keepalive=60)  # 60 seconds keep-alive

# Read from MCP3008
def read_channel(channel):
    adc = spi.xfer2([1, (8 + channel) << 4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

# Scale soil moisture value
def scale_soil_moisture(raw_value, in_min=0, in_max=1023, out_min=1, out_max=500):
    return int((raw_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)

# Convert ADC to pH
def convert_to_pH(adc_value):
    pH_value = (adc_value / 1023.0) * 14.0
    return pH_value

# Log data to SQLite
def log_data(soil_moisture, pH_value):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('''
        INSERT INTO sensor_data(timestamp, soil_moisture, pH_value)
        VALUES (?,?,?) ''',
        (timestamp, soil_moisture, pH_value))
    conn.commit()
    print(f'SQLite - Data saved: {timestamp}, Soil Moisture: {soil_moisture}, pH: {pH_value}')

# Publish data to MQTT
def publish_to_mqtt(soil_moisture, pH_value):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    message = f"field1={soil_moisture}&field2={pH_value:.2f}"
    mqtt_client.publish(publish_topic, message)
    print(f'MQTT - Data published: {message}')

# MQTT on_connect callback
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print('Connected to MQTT Broker!')
        client.subscribe(subscribe_topic)
    else:
        print(f'Failed to connect, return code {rc}')

# MQTT on_message callback
def on_message(client, userdata, message):
    if message.payload.decode() == 'TURN_OFF_PUMP':
        GPIO.output(WATER_PUMP_RELAY, GPIO.HIGH)
        print('Water Pump OFF by MQTT command')
    elif message.payload.decode() == 'TURN_ON_PUMP':
        GPIO.output(WATER_PUMP_RELAY, GPIO.LOW)
        print("Water Pump ON by MQTT command")
    print(f'MQTT - Received message: {message.payload.decode()}')

# Start MQTT Loop
mqtt_client.on_connect = on_connect
mqtt_client.on_message = on_message
mqtt_client.loop_start()

# Control thresholds
SOIL_MOISTURE_THRESHOLD = 300
PH_LOWER_THRESHOLD = 6.0
PH_UPPER_THRESHOLD = 7.5

# Main loop
try:
    while True:
        # Read Soil Moisture and pH Sensor Data
        raw_soil_moisture = read_channel(0)
        soil_moisture = scale_soil_moisture(raw_soil_moisture)
        pH_adc_value = read_channel(1)
        pH_value = convert_to_pH(pH_adc_value)

        # Log data to SQLite
        log_data(soil_moisture, pH_value)

        # Publish data to ThingSpeak via MQTT
        publish_to_mqtt(soil_moisture, pH_value)

        # Control pumps and valves based on sensor readings
        if soil_moisture > SOIL_MOISTURE_THRESHOLD:
            GPIO.output(WATER_PUMP_RELAY, GPIO.LOW)  # Turn ON water pump
            print('Water Pump ON')
        else:
            GPIO.output(WATER_PUMP_RELAY, GPIO.HIGH)  # Turn OFF water pump
            print('Water Pump OFF')

        if pH_value < PH_LOWER_THRESHOLD or pH_value > PH_UPPER_THRESHOLD:
            GPIO.output(SOLENOID_VALVE_RELAY, GPIO.LOW)  # Open solenoid valve
            GPIO.output(NUTRIENT_PUMP_RELAY, GPIO.LOW)  # Turn ON nutrient pump
            print('Solenoid Valve OPEN, Nutrient Pump ON')
        else:
            GPIO.output(SOLENOID_VALVE_RELAY, GPIO.HIGH)  # Close solenoid valve
            GPIO.output(NUTRIENT_PUMP_RELAY, GPIO.HIGH)  # Turn OFF nutrient pump
            print('Solenoid Valve CLOSED, Nutrient Pump OFF')

        # Wait for 15 seconds before taking another reading to comply with rate limit
        time.sleep(15)

except KeyboardInterrupt:
    print('Program stopped by user (Ctrl + C).')

finally:
    GPIO.cleanup()
    spi.close()
    conn.close()
    mqtt_client.loop_stop()
    mqtt_client.disconnect()